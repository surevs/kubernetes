apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels: {{ include "labels" . | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: reportportal-api
  template:
    metadata:
      labels:
        component: reportportal-api
    spec:
      containers:
      - env:
        - name: "LOGGING_LEVEL_ORG_HIBERNATE_SQL"
          value: "info"
        - name: "JAVA_OPTS"
          value: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp  -Dcom.sun.management.jmxremote.rmi.port=12349 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false  -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=10.6.128.241"
        - name: RP_AMQP_HOST
          value: "{{ .Values.rabbitmq.endpoint.address }}"
        - name: RP_AMQP_PORT
          value: "{{ .Values.rabbitmq.endpoint.port }}"
        - name: RP_AMQP_USER
          value: "{{ .Values.rabbitmq.endpoint.user }}"
        - name: RP_AMQP_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.rabbitmq.SecretName }}"
              key: "rabbitmq-password"
        - name: RP_AMQP_APIPORT
          value: "{{ .Values.rabbitmq.endpoint.apiport }}"
        - name: RP_AMQP_APIUSER
          value: "{{ .Values.rabbitmq.endpoint.apiuser }}"
        - name: RP_AMQP_APIPASS
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.rabbitmq.SecretName }}"
              key: "rabbitmq-password"
        - name: RP_DB_HOST
          value: "{{ .Values.postgresql.endpoint.address }}"
        - name: RP_DB_PORT
          value: "{{ .Values.postgresql.endpoint.port }}"
        - name: RP_DB_USER
          value: "{{ .Values.postgresql.endpoint.user }}"
        - name: RP_DB_PASS
        {{ if .Values.postgresql.endpoint.cloudservice }}
          value: "{{ .Values.postgresql.endpoint.password }}"
        {{ else }}
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.postgresql.SecretName }}"
              key: "postgresql-password"
        {{ end }}
        {{ if .Values.minio.enabled }}
        - name: RP_BINARYSTORE_TYPE
          value: "minio"
        - name: RP_BINARYSTORE_MINIO_ENDPOINT
          value: "{{ .Values.minio.endpoint }}"
        - name: RP_BINARYSTORE_MINIO_ACCESSKEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.minio.secretName }}"
              key: "accesskey"
        - name: RP_BINARYSTORE_MINIO_SECRETKEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.minio.secretName }}"
              key: "secretkey"
         {{ end }}
        image: "{{ .Values.serviceapi.repository }}:{{ .Values.serviceapi.tag }}"
        name: api
        ports:
        - containerPort: 8585
          protocol: TCP
        resources:
          requests:
            cpu: {{ .Values.serviceapi.resources.requests.cpu }}
            memory: {{ .Values.serviceapi.resources.requests.memory }}
          limits:
            cpu: {{ .Values.serviceapi.resources.limits.cpu }}
            memory: {{ .Values.serviceapi.resources.limits.memory }}
        readinessProbe:
          httpGet:
            path: "{{ .Values.rp.healthEndpoint }}"
            port: 8585
          initialDelaySeconds: {{ .Values.serviceapi.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.serviceapi.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.serviceapi.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.serviceapi.readinessProbe.failureThreshold }}
{{ include "nodeSelector" . | indent 8 }}
